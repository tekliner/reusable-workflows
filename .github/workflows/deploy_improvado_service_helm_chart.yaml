name: Deploy Helm chart to cluster
on:
  workflow_call:
    secrets:
      HARBOR_LOGIN:
        required: true
        description: Harbor login to pull images
      HARBOR_PASSWORD:
        required: true
        description: Harbor password to pull images
    inputs:
      runs_on:
        description: "Job's runs-on parameter"
        type: string
        required: false
        default: '["self-hosted", "can-run-small-job"]'

      # Helm chart parameters
      chart_name:
        description: "Helm chart name e.g. <helm-uls-component>"
        type: string
        required: true
      chart_release:
        description: "Helm chart release name"
        type: string
        required: true
      chart_version:
        description: "Helm chart package version"
        type: string
        required: true
      namespace:
        description: "Namespace for installing helm chart"
        type: string
        required: true
      values_path:
        description: "Path to values.yaml in repo"
        required: true
        type: string

      # Image parameters (docker image)
      image_repository:
        description: 'Image repository (e.g. "dsas")'
        type: string
        required: true
      image_tag:
        description: "Image tag"
        type: string
        required: true
      image_tag_path:
        description: "Image tag path into values.yaml"
        type: string
        default: "image.tag"
        required: false

      # AWS parameters
      aws_management_account_id:
        description: "AWS management account id - for ECR"
        required: true
        type: string
      aws_management_regions:
        description: |
          Comma-separated list of regions, e.g. "eu-central-1,us-east-1".
          Docker images will be pushed to regions from list.
        required: true
        type: string
      aws_prod_account_id:
        description: "AWS Prod account id - for deployment"
        required: true
        type: string
      aws_prod_region:
        description: AWS region to deploy application in.
        required: true
        type: string
      cluster_name:
        description: "Name of AWS EKS cluster"
        type: string
        required: true

      # BUILD and PUSH step
      build_and_push_step_env:
        description: |
          Environment variables in json string format
          # example:
          build_and_push_step_env: |
            {
              "AWS_ACCOUNT_ID": "627003544259",
              "AWS_REGIONS": "us-east-1,eu-central-1",
              "ECR_REPO": "ch-file-writer",
              "IMAGE_TAG": "master-1-1"
            }
        type: string
        required: false
        default: '{}'
      build_and_push_step_run:
        description: "Step for build and push image custom for many repos"
        type: string
        required: false
        default: |
          APP_IMAGE="${ECR_REPO}:${IMAGE_TAG}"
          PYTHON_IMAGE=$(grep --max-count 1 -P '^ARG PYTHON_IMAGE=python:.+$' ./Dockerfile | cut -d "=" -f 2)
          
          docker build . \
            --tag ${APP_IMAGE} \
            --build-arg PYTHON_IMAGE=harbor.tools.improvado.io/hub-cache/library/${PYTHON_IMAGE}
          
          IFS=',' read -r -a REGIONS <<< "${AWS_REGIONS}"
          
          for REGIONS in "${REGIONS[@]}"
          do
            IMAGE_FULL_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${APP_IMAGE}"
            docker tag ${APP_IMAGE} ${IMAGE_FULL_NAME}
            docker push "${IMAGE_FULL_NAME}"
            echo "::notice title=Pushed image to repo ${ECR_REPO}::Image that was pushed: ${IMAGE_FULL_NAME}"
          done


concurrency:
  group: ${{ github.ref }}--deploy-via-helm
  cancel-in-progress: false

permissions:
  id-token: write
  actions: read
  checks: read
  contents: read
  pull-requests: read
  statuses: write

jobs:
  deploy:
    name: Install helm ${{ inputs.chart_release }} release
    timeout-minutes: 20
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # AWS Management
      - name: Set default AWS region 
        id: default_aws_management_region
        run: |
          IFS=',' read -r -a REGIONS <<< "${{inputs.aws_management_regions}}"
          echo "::set-output name=region::${REGIONS[0]}"
      - name: Configure AWS Management credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{inputs.aws_management_account_id}}:role/github_actions_ecr_${{inputs.image_repository}}-test-nz # FIXME
          role-session-name: github_actions_ecr_ci_${{ inputs.chart_name }}_${{ inputs.chart_release }}
          aws-region: ${{steps.default_aws_management_region.outputs.region}}
          mask-aws-account-id: "no"
      - name: Login to Harbor
        uses: docker/login-action@v1
        with:
          registry: harbor.tools.improvado.io
          username: ${{ secrets.HARBOR_LOGIN }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: Install helm
        uses: azure/setup-helm@v1.1
        with:
          version: v3.9.0
      - name: Login to Amazon ECR (docker)
        run: |
          IFS=',' read -r -a REGIONS <<< "${{inputs.aws_management_regions}}"
          
          for REGION in "${REGIONS[@]}"
          do
            aws ecr get-login-password \
              --region "${REGION}" \
            | docker login \
                --username AWS \
                --password-stdin \
                "${{inputs.aws_management_account_id}}.dkr.ecr.${REGION}.amazonaws.com"
          done
      - name: Build and push image to ECR
        env: ${{ fromJSON(inputs.build_and_push_step_env) }}
        run: ${{ inputs.build_and_push_step_run }}

      # AWS Prod

      - name: Configure AWS Prod credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{inputs.aws_prod_account_id}}:role/github_actions_ecr_${{inputs.chart_name}}-test-nz # FIXME
          role-session-name: github_actions_ecr_ci_${{inputs.chart_name}}_${{inputs.chart_release}}
          aws-region: ${{inputs.aws_prod_region}}
          mask-aws-account-id: "no"
      - name: Login to Amazon ECR (helm)
        run: |
          aws ecr get-login-password \
          | helm registry login \
            --username AWS \
            --password-stdin \
            "${{inputs.aws_management_account_id}}.dkr.ecr.${{inputs.aws_prod_region}}.amazonaws.com"
      - name: Pull helm chart from ECR
        run: |
          helm pull \
            oci://${{inputs.aws_management_account_id}}.dkr.ecr.${{inputs.aws_prod_region}}.amazonaws.com/${{inputs.chart_name}} \
            --version ${{inputs.chart_version}}
      - name: Login to Kubernetes cluster (${{inputs.cluster_name}})
        run: |
          aws eks update-kubeconfig \
            --name ${{ inputs.cluster_name }}
      - name: Install/upgrade helm chart to Kubernetes cluster
        run: |
          helm upgrade ${{ inputs.chart_release }} ./${{ inputs.chart_name }}-${{ inputs.chart_version }}.tgz \
            --wait \
            --install \
            -f ${GITHUB_WORKSPACE}/k8s/${{ inputs.values_path }} \
            -n ${{ inputs.namespace }} \
            --set ${{ inputs.image_tag_path }}=${{ inputs.image_tag }} \
            --timeout 15m0s \
            --debug
      - name: Add notice with release info
        run: |
          MESSAGE="
          Chart: ${{ inputs.chart_name }};
          Release: ${{ inputs.chart_release }};
          Version: ${{ inputs.chart_version }};
          Image Tag: ${{ inputs.image_tag }};
          "
          echo "::notice title=Installed chart::${MESSAGE//$'\n'/'%0A'}"
